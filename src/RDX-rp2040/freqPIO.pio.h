// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //


#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// freqPIO //
// ------- //

#define freqPIO_wrap_target 0
#define freqPIO_wrap 2

static const uint16_t freqPIO_program_instructions[] = {
            //     .wrap_target
    0x20a0, //  0: wait   1 pin, 0                   
    0xc030, //  1: irq    wait 0 rel                 
    0x2020, //  2: wait   0 pin, 0                   
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program freqPIO_program = {
    .instructions = freqPIO_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config freqPIO_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + freqPIO_wrap_target, offset + freqPIO_wrap);
    return c;
}

    /**
     * Initializer for the freqPIO program
     * @param[in] pio the PIO instance to use
     * @param[in] sm state machine to use for the PIO instance
     * @param[in] offset Offset into PIO memory to place the program into
     * @param[in] pin used to receive the signal to watch
     */
    static inline void freqPIO_program_init(PIO pio, uint sm, uint offset, uint pin) {
        // Enable the IRQ source
        // The reason for doing interrupt0 + sm:
        // IRQ sources are enabled per irq flag. Since the irq flag being set depends on the state
        // machine because of the "0 rel", we want to make sure we're enabling the correct interrupt
        // source for the state machine the program is loaded into. 
        pio_set_irq0_source_enabled(pio, (pio_interrupt_source)(pis_interrupt0 + sm), true);
        // Make sure the interrupt starts cleared. It should already be cleared, so this should
        // basically be a no-op. I call it defensive programming.
        pio_interrupt_clear(pio, sm);
        // Build the configuration for the state machine
        pio_sm_config config = freqPIO_program_get_default_config(offset);
        // Set up autopull to pull the TX Fifo into the OSR
        // This is what actually makes the "out" instruction wait
        // for input from software.
        // params are (config, shift_right (ignored here), autopull (true), pull threshold (1 bit))
        sm_config_set_out_shift(&config, true, true, 1);
        // Map the GPIO pin to be used to the state machine running the firmware
        sm_config_set_in_pins(&config, pin);
        pio_gpio_init(pio, pin);
        // Load the config and execute the state machine
        pio_sm_init(pio, sm, offset, &config);
        pio_sm_set_enabled(pio, sm, true);
    }

#endif
